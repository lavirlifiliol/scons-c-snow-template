import os
from subprocess import check_output
from pathlib import Path
from io import BytesIO

def run_integration_tests(target, source, env):
    test_path = Path('tests')
    for test in test_path.glob('*.in'):
        stdin = test.read_bytes()
        stdout_correct = (test_path / (test.stem + '.out')).read_bytes()
        stdout_real = check_output(['valgrind', *env["VGFLAGS"], str(target[0])], input=stdin)
        print(f'checking {test}.in')
        if stdout_real != stdout_correct:
            print('\nREAL')
            print(stdout_real.decode())
            print('~~~~~~')
            print('CORRECT')
            print(stdout_correct.decode())
            return 1
        print('\033[32mPASS\033[0m')

env = Environment(
    CC=os.environ.get('CC', 'clang'),
    CCFLAGS=['-Wall', '-Wextra', '-Wpedantic', '-Werror'],
    CPPPATH=['.', '../include'],
    VGFLAGS=['--quiet','--leak-check=full','--show-leak-kinds=all','--track-origins=yes','--error-exitcode=1'],
)
test_binary = env.Program(
    'test',
    env.Glob('*.c'),
    CCFLAGS=[ '-fsanitize=undefined', '-O0', '-g',],
    CPPFLAGS=['-DSNOW_ENABLED', ],
    LINKFLAGS=['-fsanitize=undefined'],
    OBJPREFIX='test-',
)

integration_binary = env.Program(
    'itest',
    env.Glob('*.c'),
    CCFLAGS=[ '-fsanitize=undefined', '-O0', '-g',],
    LINKFLAGS=['-fsanitize=undefined'],
    OBJPREFIX='itest-',
)

prod_binary = env.Program(
    env.Glob('*.c'),
    CCFLAGS=['-O2'],
)

env.Alias('test', test_binary)
env.AddPostAction(integration_binary, run_integration_tests)
env.AddPostAction(test_binary, 'valgrind $VGFLAGS ./build/test')
env.AlwaysBuild(test_binary)
env.AlwaysBuild(integration_binary)
env.Depends(prod_binary, integration_binary)
env.Depends(integration_binary, test_binary)
env.Command('../out/'+str(prod_binary[0]), prod_binary, 'cp $SOURCE $TARGET',)
